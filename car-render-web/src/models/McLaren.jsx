/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.15 .\public\models\mclaren.glb 
*/

import React, { useRef, useLayoutEffect, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber';
import gsap from 'gsap';

const doorRotationMagnitude = {
  x: 0.18,
  y: 0,
  z: 0.6,
}

export function McLaren(props) {
  const { nodes, materials } = useGLTF('./models/mclaren.glb')
  const rightDoorRef = useRef();
  const leftDoorRef = useRef();
  const ref = useRef();
  const [leftDoorOpen, setLeftDoorOpen] = useState(false);
  const [rightDoorOpen, setRightDoorOpen] = useState(false);
  const leftDoorTimeline = useRef();
  const rightDoorTimeline = useRef();
  const { ...rest } = props;

  // useFrame(() => {
  //   console.log(rightDoorTimeline.current.duration())
  // })

  useLayoutEffect(() => {
    leftDoorTimeline.current = gsap.timeline({ paused: true });
    rightDoorTimeline.current = gsap.timeline({ paused: true });
    leftDoorTimeline.current.to(leftDoorRef.current.rotation, {
      duration: 2,
      x: Math.PI * doorRotationMagnitude.x,
      y: Math.PI * doorRotationMagnitude.y,
      z: Math.PI * doorRotationMagnitude.z,
    });
    rightDoorTimeline.current.to(rightDoorRef.current.rotation, {
      duration: 2,
      x: Math.PI * doorRotationMagnitude.x,
      y: Math.PI * doorRotationMagnitude.y,
      z: -Math.PI * doorRotationMagnitude.z,
    });
  }, []);

  // useEffect(() => {
  //   rightDoorRef.current.rotation.x = Math.PI * value * doorRotationMaginude.x;
  //   rightDoorRef.current.rotation.y = Math.PI * value * doorRotationMaginude.y;
  //   rightDoorRef.current.rotation.z = Math.PI * value * doorRotationMaginude.z;
  //   leftDoorRef.current.rotation.x = Math.PI * value * doorRotationMaginude.x;
  //   leftDoorRef.current.rotation.y = Math.PI * value * doorRotationMaginude.y;
  //   leftDoorRef.current.rotation.z = Math.PI * value * doorRotationMaginude.z * -1;
  // }, [value])

  const onRightDoorClick = () => {
    console.log('right door click');
    if (rightDoorOpen) {
      rightDoorTimeline.current.reverse();
    } else {
      rightDoorTimeline.current.play();
    }
    setRightDoorOpen(!rightDoorOpen);
  }

  const onLeftDoorClick = () => {
    if (leftDoorOpen) {
      leftDoorTimeline.current.reverse();
    } else {
      leftDoorTimeline.current.play();
    }
    setLeftDoorOpen(!leftDoorOpen);
  }

  return (
    <group {...rest} dispose={null} ref={ref}>
      <group position={[0, 0.402, 0]}>
        <mesh geometry={nodes.Mesh089.geometry} material={materials.GreyBlack} />
        <mesh geometry={nodes.Mesh089_1.geometry} material={materials.Translucent} />
        <mesh geometry={nodes.Mesh089_2.geometry} material={materials.Grey} />
        <mesh geometry={nodes.Mesh089_3.geometry} material={materials.Glass} />
        <mesh geometry={nodes.Mesh089_4.geometry} material={materials.BodyPaint} />
        <mesh geometry={nodes.Mesh089_5.geometry} material={materials.OrangeBody} />
        <mesh geometry={nodes.Mesh089_6.geometry} material={materials.BlackMetallic} />
        <mesh geometry={nodes.Mesh089_7.geometry} material={materials.Windows} />
        <mesh geometry={nodes.Mesh089_8.geometry} material={materials.Headlight} />
        <mesh geometry={nodes.Mesh089_9.geometry} material={materials.Top} />
        <mesh geometry={nodes.Mesh089_10.geometry} material={materials.BackLighs} />
        <mesh geometry={nodes.Mesh089_11.geometry} material={materials.Baclight} />
        <mesh geometry={nodes.Mesh089_12.geometry} material={materials.Shining} />
        <mesh geometry={nodes.Mesh089_13.geometry} material={materials['Back Plate']} />
        <mesh geometry={nodes.Mesh089_14.geometry} material={materials.Dashboard} />
        <mesh geometry={nodes.Mesh089_15.geometry} material={materials['Red Light']} />
        <mesh geometry={nodes.Mesh089_16.geometry} material={materials.Metallic} />
        <mesh geometry={nodes.Mesh089_17.geometry} material={materials['Seat lining']} />
        <mesh geometry={nodes.Mesh089_18.geometry} material={materials.Seat} />
        <mesh geometry={nodes.Mesh089_19.geometry} material={materials.screen} />
        <mesh geometry={nodes.Mesh089_20.geometry} material={materials.Crbon} />
        <mesh geometry={nodes.Mesh089_21.geometry} material={materials.Interior} />
        <mesh geometry={nodes.Mesh089_22.geometry} material={materials.Material} />
      </group>
      <group position={[-1.195, -0.039, 1.664]} rotation={[Math.PI / 2, 0, 0]} scale={0.001}>
        <mesh geometry={nodes.uploads_files_637554_Wheel_ADV1_50.geometry} material={materials.wire_135006006} />
        <mesh geometry={nodes.uploads_files_637554_Wheel_ADV1_50_1.geometry} material={materials.wire_162162162} />
      </group>
      <group position={[-1.231, -0.039, -2.137]} rotation={[Math.PI / 2, 0, 0]} scale={0.001}>
        <mesh geometry={nodes.uploads_files_637554_Wheel_ADV1_5001.geometry} material={materials['wire_135006006.001']} />
        <mesh geometry={nodes.uploads_files_637554_Wheel_ADV1_5001_1.geometry} material={materials['wire_162162162.001']} />
      </group>
      <group position={[1.23, -0.039, -2.137]} rotation={[Math.PI / 2, 0, Math.PI]} scale={0.001}>
        <mesh geometry={nodes.uploads_files_637554_Wheel_ADV1_5003.geometry} material={materials['wire_135006006.003']} />
        <mesh geometry={nodes.uploads_files_637554_Wheel_ADV1_5003_1.geometry} material={materials['wire_162162162.003']} />
      </group>
      <group position={[1.195, -0.039, 1.664]} rotation={[Math.PI / 2, 0, Math.PI]} scale={0.001}>
        <mesh geometry={nodes.uploads_files_637554_Wheel_ADV1_5002.geometry} material={materials['wire_135006006.002']} />
        <mesh geometry={nodes.uploads_files_637554_Wheel_ADV1_5002_1.geometry} material={materials['wire_162162162.002']} />
      </group>
      <group position={[-0.817, 1.44, 0.617]} ref={rightDoorRef} onClick={onRightDoorClick}>
        <mesh geometry={nodes.Mesh001.geometry} material={materials.GreyBlack} />
        <mesh geometry={nodes.Mesh001_1.geometry} material={materials.Translucent} />
        <mesh geometry={nodes.Mesh001_2.geometry} material={materials.Glass} />
        <mesh geometry={nodes.Mesh001_3.geometry} material={materials.BodyPaint} />
        <mesh geometry={nodes.Mesh001_4.geometry} material={materials.BlackMetallic} />
        <mesh geometry={nodes.Mesh001_5.geometry} material={materials.Windows} />
        <mesh geometry={nodes.Mesh001_6.geometry} material={materials.Metallic} />
      </group>
      <group position={[0.861, 1.423, 0.559]} ref={leftDoorRef} onClick={onLeftDoorClick}>
        <mesh geometry={nodes.Mesh002.geometry} material={materials.GreyBlack} />
        <mesh geometry={nodes.Mesh002_1.geometry} material={materials.Translucent} />
        <mesh geometry={nodes.Mesh002_2.geometry} material={materials.Glass} />
        <mesh geometry={nodes.Mesh002_3.geometry} material={materials.BodyPaint} />
        <mesh geometry={nodes.Mesh002_4.geometry} material={materials.BlackMetallic} />
        <mesh geometry={nodes.Mesh002_5.geometry} material={materials.Windows} />
      </group>
    </group>
  )
}

useGLTF.preload('./models/mclaren.glb')
